cmake_minimum_required( VERSION 3.16 )

#################################################
#                                               #
#                  Set by user                  #
#                                               #
#################################################


# Config options
option( BUILD_DOC "Create a make target for documentation"   ON )
option( ENABLE_TESTING "Create a make target for test cases" ON )
option( OPTIMIZE_FOR_NATIVE "Build with -march=native etc"   OFF )


#################################################
#                                               #
#               Set by developer                #
#                                               #
#################################################

### Constants ###

# Shared library name
set( CLARICPP "claricpp" )

# API Version
# This is different from version which is read from /VERSION
set( SOVERSION 1 )

# Run make <DOC_MAKE_TARGET> to build documentation if BUILD_DOC is ON
# Running make <DOC_MAKE_TARGET> generates html, latex, and man pages
set( DOC_MAKE_TARGET "docs" )

# Default build type
# Default to debug mode
# Use cache to override defaults
# Can override this by running cmake with "-DCMAKE_BUILD_TYPE=Release"
set( CMAKE_BUILD_TYPE "Debug" CACHE STRING "Cmake build type" )

# Log levels are defined in ./src/utils/log/level/level/hpp
# Note: Lower log levels implier higher levels (i.e. verbose implies critical)
set( DEFAULT_RELEASE_LOG_LEVEL "Warning" )
set( DEFAULT_DEBUG_LOG_LEVEL "Debug" )
set( DEFAULT_OTHER_LOG_LEVEL "Info" )

### Config Options ###

# Static Analysis Options
option( IWYU "Enable iwyu" OFF )
option( LWYU "Enable lwyu" ON )
option( CPP_CHECK "Enable cppcheck" ON )
option( CLANG_TIDY "Enable clang-tidy" ON )

# Config options
option( CMAKE_VERBOSE_MAKEFILE "Enable make VERBOSE=1 by default" OFF )
# This is useful for IDEs, developer tools, and for doxygen documentation generation
option( CMAKE_EXPORT_COMPILE_COMMANDS "Exports a json useful to IDEs and other tools" ON )
# The memcheck and security options are mutually exclusive
# Memcheck cannot run with security enabled
option( ENABLE_MEMCHECK "Enable memcheck on test target" ON )
option( ALLOW_NO_MEMCHECK_APPLE "Allow not using memcheck on apple" ON )
# If enabled: log calls to log levels lower than defined will have no performance penalty
option( CONSTANT_LOG_LEVEL "Force log level to be set at compiletime for release builds" OFF )

# Security Options
# These options will overide any previously set option if enabled
option( ENABLE_SECURITY "Build with security flags at the cost of runtime performance" OFF )
option( ENABLE_CET "Builds with CET fcf-protection, requires ENABLE_SECURITY" OFF )

# Default regeneration options
# If objects have not yet been autogenerated, this is overridden
# Default disable regeneration of autogen's files
# Note: this variable does not respect the CMake cache!
# Can override this by running cmake with "-DREGEN_AUTOGEN=ON"
if(DEFINED REGEN_AUTOGEN)
	set(TMP "${REGEN_AUTOGEN}")
	unset(REGEN_AUTOGEN CACHE)
	set(REGEN_AUTOGEN "${TMP}")
	unset(TMP)
elseif(NOT DEFINED REGEN_AUTOGEN)
	set( REGEN_AUTOGEN OFF )
endif()


#################################################
#                                               #
#               Program Constants               #
#                                               #
#################################################


# Define the project
project("${CLARICPP}" C CXX)

# Define standards
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Define the version
file(READ "../VERSION" VERSION)
string(STRIP "${VERSION}" VERSION)

# Library source
# Used for compilation and header lookup for tests
set(CLARICPP_SRC "${CMAKE_CURRENT_SOURCE_DIR}/src")

# Append to the cmake search path
# This allows for simple invoking of cmake files in this path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")


#################################################
#                                               #
#    Pre SO Target Definition Configuration     #
#                                               #
#################################################


# Find Required
include(FindRequired)

# Static Anaylsis
include(StaticAnalsis)

# Documentation
if(BUILD_DOC)
	include(Doxygen)
endif()

# Global required complication flags
add_compile_options(
	"-Wall"
	"-Wextra"
	"-Weffc++"
	"-Werror"
	# Remap file prefixes to make source location irrelevant to build constants like __FILE__
	"-ffile-prefix-map=${CMAKE_SOURCE_DIR}/=/"
)


#################################################
#                                               #
#               Target Definition               #
#                                               #
#################################################


# Note: This should be the last program constant
# Non-target specific things *must* be defined before this for them to affect this
add_library("${CLARICPP}" SHARED)


#################################################
#                                               #
#             Option Configuration              #
#                                               #
#################################################


# Option verification
if(ENABLE_MEMCHECK AND APPLE AND NOT ALLOW_NO_MEMCHECK_APPLE)
	message(FATAL_ERROR "Memcheck is not compatible with the lastest versions of MacOS")
endif()

# Optimize for native code
if(OPTIMIZE_FOR_NATIVE)
	target_compile_options("${CLARICPP}" PRIVATE
		"-march=native"
		"-mtune=native"
	)
endif()

# Fix compile time logging
if(CMAKE_BUILD_TYPE MATCHES Release AND CONSTANT_LOG_LEVEL)
    message("Runtime logging disabled!")
	target_compile_definitions("${CLARICPP}" PUBLIC "CONSTANT_LOG_LEVEL") # Export this macro
else()
    message("Runtime logging enabled!")
endif()

# Enable testing
if(ENABLE_TESTING)
    message("Testing enabled!")
	include(CTest)
	enable_testing()
	target_compile_definitions("${CLARICPP}" PUBLIC "ENABLE_TESTING") # Export this macro
else()
    message("Testing disabled!")
endif()

# Build type
if(CMAKE_BUILD_TYPE MATCHES Debug)
    message("Debug Mode enabled!")
	target_compile_definitions("${CLARICPP}"
		PUBLIC  "DEFAULT_LOG_LEVEL=${DEFAULT_DEBUG_LOG_LEVEL}" # Export this macro
		PRIVATE "DEBUG"
	)
	# Macros
	target_compile_definitions("${CLARICPP}" PRIVATE "_GLIBCXX_ASSERTIONS")
	# Compile flags
	target_compile_options("${CLARICPP}" PRIVATE
		"-O0"
		"-g"
		"-fasynchronous-unwind-tables"
		"-grecord-gcc-switches"
	)
elseif(CMAKE_BUILD_TYPE MATCHES Release)
    message("Release Build enabled!")
	target_compile_definitions("${CLARICPP}" PUBLIC  # Export this macro
		"DEFAULT_LOG_LEVEL=${DEFAULT_RELEASE_LOG_LEVEL}"
	)
	# Compilation and linker flags
	target_compile_options("${CLARICPP}" PRIVATE "-pipe" "-O3")
	target_link_options("${CLARICPP}" PRIVATE "-flto")
else()
	message(WARNING "Build level: ${CMAKE_BUILD_TYPE}")
	target_compile_definitions("${CLARICPP}" PUBLIC # Export this macro
		"DEFAULT_LOG_LEVEL=${DEFAULT_OTHER_LOG_LEVEL}"
	)
endif()

# Enable security flags
# These come after build type as they may override the given flags
if(ENABLE_SECURITY)
	message(WARNING "Security mode enabled. Overriding other options!")
	if(ENABLE_MEMCHECK)
		message(FATAL_ERROR "ENABLE_SECURITY and ENABLE_MEMCHECK are mutually exclusive")
	elseif(CLANG_TIDY AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		message(FATAL_ERROR
			"ENABLE_SECURITY and CLANG_TIDY are mutually exclusive when not using clang."
			"\nWhen compiling with gcc we add gcc specific compile-flags that clang tidy cannot handle."
		)
	endif()

	# Macros that have never been defined before
	target_compile_definitions("${CLARICPP}" PRIVATE "_GLIBCXX_ASSERTIONS")

	# Basic Security flags
	target_compile_options("${CLARICPP}" PRIVATE
		"-U_FORTIFY_SOURCE"   # Undefine compiler built-in fortification default
		"-D_FORTIFY_SOURCE=2" # Update fortify source to level 2
		"-m64"
		# "-mmitigate-rop" # Deprecated
		"-fsanitize=address"
		"-fstack-protector-all"
		"-Wstack-protector"
		"--param" "ssp-buffer-size=4"
		"-Wformat"
		"-Wformat-security"
		"-fpic"
		"-ftrapv"
		"-O2" # Enable source hardening, avoid the dangers of O3
		# "-fvtable-verify=std" # Requires custom gcc compilation with this flag enabled.
	)

	# GCC only
	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		target_compile_options("${CLARICPP}" PRIVATE
			"-fstack-clash-protection" # Exists in newer versions of llvm
		)
	endif()

	# Hardware security
	if (ENABLE_CET)
		target_compile_options("${CLARICPP}" PRIVATE "-fcf-protection=full")
	elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		target_compile_options("${CLARICPP}" PRIVATE
			"-mindirect-branch=thunk"
			"-mfunction-return=thunk"
			"-fcf-protection=none" # Disable CET
		)
	endif()

	# Linker flags
	if(NOT CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang") # Apple Clang doesn't like these
		target_link_options("${CLARICPP}" PRIVATE
			"LINKER:-z,relro,-z,now"
			"LINKER:-z,noexecstack"
			"LINKER:-dynamicbase" # Just in case
		)
	else()
		message(WARNING "AppleClang does not support important security based linker flags")
	endif()
	target_link_options("${CLARICPP}" PRIVATE
		"-fsanitize=address" # Link relevant sanitization functions
		"-O2" # Enable source hardening, avoid the dangers of O3
	)

endif()


#################################################
#                                               #
#          Generate Library and Tests           #
#                                               #
#################################################


# Create a make target for the library
add_subdirectory("${CLARICPP_SRC}")

# Clang is overly cautious and gives warnings that do not apply here
# So for the specific source file, we reduce them back to warnings
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	set(FNAME "${CLARICPP_SRC}/expression/raw/op/literal.cpp")
	message(WARNING "Reducing uninitialized errors to warnings for ${FNAME}")
	set_source_files_properties("${FNAME}"
		PROPERTY COMPILE_FLAGS "-Wno-error=uninitialized"
	)
endif()

# Configure library compilation and linking
# This is just in case we missed any flags above
if(CMAKE_BUILD_TYPE MATCHES Release)
	set_property(TARGET "${CLARICPP}"
		PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE
	)
endif()

# Create a make target for test cases
if(ENABLE_TESTING)
	add_subdirectory(tests)
endif()
