cmake_minimum_required( VERSION 3.16 )

#################################################
#                                               #
#                  Set by user                  #
#                                               #
#################################################


# Shared library name
set( SHARED_LIB_NAME "claricpp" )

# Config options
option( BUILD_DOC "Create a make target for documentation"   ON )
option( ENABLE_TESTING "Create a make target for test cases" ON )
option( OPTIMIZE_FOR_NATIVE "Build with -march=native etc"   OFF )

### Developer options below ###

# API Version
# This is different from version which is read from /VERSION
set( SOVERSION 1 )

# Run make <DOC_MAKE_TARGET> to build documentation if BUILD_DOC is ON
# Running make <DOC_MAKE_TARGET> generates html, latex, and man pages
set( DOC_MAKE_TARGET docs )

# Static Analysis Options
option( IWYU "Enable iwyu" OFF )
option( LWYU "Enable lwyu" ON )
option( CPP_CHECK "Enable cppcheck" ON )
option( CLANG_TIDY "Enable clang-tidy" ON )

# Default build type
# Default to debug mode
# Use cache to override defaults
# Can override this by running cmake with "-DCMAKE_BUILD_TYPE=Release"
set( CMAKE_BUILD_TYPE "Debug" CACHE STRING "Cmake build type" )

# Default regeneration options
# If objects have not yet been autogenerated, this is overridden
# Default disable regeneration of autogen's files
# Note: this variable does not respect the CMake cache!
# Can override this by running cmake with "-DREGEN_AUTOGEN=ON"
if(DEFINED REGEN_AUTOGEN)
	set(TMP "${REGEN_AUTOGEN}")
	unset(REGEN_AUTOGEN CACHE)
	set(REGEN_AUTOGEN "${TMP}")
	unset(TMP)
elseif(NOT DEFINED REGEN_AUTOGEN)
	set( REGEN_AUTOGEN OFF )
endif()

# Config options
option( CMAKE_VERBOSE_MAKEFILE "Enable make VERBOSE=1 by default" OFF )
# This is useful for IDEs, developer tools, and for doxygen documentation generation
option( CMAKE_EXPORT_COMPILE_COMMANDS "Exports a json useful to IDEs and other tools" ON )
# The memcheck and security options are mutually exclusive
# Memcheck cannot run with security enabled
option( ENABLE_MEMCHECK "Enable memcheck on test target" ON )
option( ALLOW_NO_MEMCHECK_APPLE "Allow not using memcheck on apple" ON )
# If enabled: log calls to log levels lower than defined will have no performance penalty
option( CONSTANT_LOG_LEVEL "Force log level to be set at compiletime for release builds" OFF )
# Note that ENABLE_SECURITY overrides the flags of every other option
option( ENABLE_SECURITY "Build security flags at the cost of runtime performance" OFF )

# Log levels are defined in ./src/utils/log/level/level/hpp
# Note: Lower log levels implier higher levels (i.e. verbose implies critical)
set( DEFAULT_RELEASE_LOG_LEVEL "Warning" )
set( DEFAULT_DEBUG_LOG_LEVEL "Debug" )
set( DEFAULT_LOG_LEVEL "Info" )


#################################################
#                                               #
#               Program Constants               #
#                                               #
#################################################


# Define the project
set(PROJECT_NAME Claricpp)
project("${PROJECT_NAME}" C CXX)

# Define standards
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_EXTENSIONS ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Library source
# Used for compilation and header lookup for tests
set(CLARICPP_SRC "${CMAKE_CURRENT_SOURCE_DIR}/src")

# Required complication flags
add_compile_options(
	"-Wall"
	"-Wextra"
	"-Weffc++"
	"-Werror"
)


#################################################
#                                               #
#            Find Required Packages             #
#                                               #
#################################################


# Allow custom find commands
# This is required for certain libraries that do not have first party cmake find support
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Find required packages
find_package(Boost 1.7 REQUIRED)
find_package(GMP REQUIRED)


#################################################
#                                               #
#              Automated - General              #
#                                               #
#################################################


# Option verification
if(ENABLE_MEMCHECK AND APPLE AND NOT ALLOW_NO_MEMCHECK_APPLE)
	message(FATAL_ERROR "Memcheck is not compatible with the lastest versions of MacOS")
endif()

# Define the version
file(READ "../VERSION" VERSION)
string(STRIP "${VERSION}" VERSION)

# Remap file prefixes to make source location irrelevant to build constants like __FILE__
add_compile_options("-ffile-prefix-map=${CMAKE_SOURCE_DIR}/=/")

# Optimize for native code
if(OPTIMIZE_FOR_NATIVE)
	add_compile_options(
		"-march=native"
		"-mtune=native"
	)
endif()

# Fix compile time logging
if(CMAKE_BUILD_TYPE MATCHES Release AND CONSTANT_LOG_LEVEL)
    message("*** Runtime logging disabled! ***")
	add_definitions(-DCONSTANT_LOG_LEVEL)
else()
    message("*** Runtime logging enabled! ***")
endif()

# Enable testing
if(ENABLE_TESTING)
    message("*** Testing enabled! ***")
	include(CTest)
	enable_testing()
    add_definitions(-DTEST)
else()
    message("*** Testing disabled! ***")
endif()

# Build type
if(CMAKE_BUILD_TYPE MATCHES Debug)
    message("*** Debug Mode enabled! ***")
	add_definitions(-DDEFAULT_LOG_LEVEL=${DEFAULT_DEBUG_LOG_LEVEL}) # no quotes because it is a C-macro
	# Add debug macro
    add_definitions(-DDEBUG)
	# Debug flags
	set(DEBUG_FLAGS
		"-O0"
		"-g"
		"-fasynchronous-unwind-tables"
		"-grecord-gcc-switches"
		"-D_GLIBCXX_ASSERTIONS"
	)
	string(REPLACE ";" " " DEBUG_FLAGS "${DEBUG_FLAGS}")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${DEBUG_FLAGS}")
	set(CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   ${DEBUG_FLAGS}")
elseif(CMAKE_BUILD_TYPE MATCHES Release)
    message("*** Release Build enabled! ***")
	add_definitions(-DDEFAULT_LOG_LEVEL=${DEFAULT_RELEASE_LOG_LEVEL}) # no quotes because it is a C-macro
	# Release flags
	set(RELEASE_FLAGS "-pipe -flto -O3")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${RELEASE_FLAGS}")
	set(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   ${RELEASE_FLAGS}")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flto")
else()
	add_definitions(-DDEFAULT_LOG_LEVEL=${DEFAULT_LOG_LEVEL}) # no quotes because it is a C-macro
endif()

# Enable security flags
# These come after build type as they may override the given flags
if(ENABLE_SECURITY)
	message(WARNING "Security mode enabled. Overriding other options!")
	if(ENABLE_MEMCHECK)
		message(FATAL_ERROR "ENABLE_SECURITY and ENABLE_MEMCHECK are mutually exclusive")
	endif()

	# Security flags
	set(SECURITY_FLAGS
		"-m64"
		"-fsanitize=address"
		"-D_GLIBCXX_ASSERTIONS"
		"-fstack-protector-all"
		"-Wstack-protector"
		"--param ssp-buffer-size=4"
		"-pie"
		"-fPIE"
		"-ftrapv"
		"-D_FORTIFY_SOURCE=2"
		"-O2"
		"-Wl,-z,relro,-z,now"
		"-Wl,-z,noexecstack"
		"-Wformat -Wformat-security"
		# "-fvtable-verify=std" # Requires custom gcc compilation with this flag enabled.
	)
	string(REPLACE ";" " " SECURITY_FLAGS "${SECURITY_FLAGS}")

	# Since we are overriding already set flags, we must set them depending on build type
	# Build type flags are appended to the default flags, so if they are used we append to them
	# directly instead of appending to the default flags, to ensure these overrides work
	if(CMAKE_BUILD_TYPE MATCHES Debug)
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${SECURITY_FLAGS}")
		set(CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   ${SECURITY_FLAGS}")
	elseif(CMAKE_BUILD_TYPE MATCHES Release)
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${SECURITY_FLAGS}")
		set(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   ${SECURITY_FLAGS}")
	else()
		add_compile_options(${SECURITY_FLAGS})
	endif()

endif()


#################################################
#                                               #
#                    Doxygen                    #
#                                               #
#################################################


if(BUILD_DOC)

	# Find packages
	find_package(Doxygen REQUIRED dot)

	# Config
	if (CMAKE_CXX_EXTENSIONS)
		set(CXX_LIB "gnu")
	else()
		set(CXX_LIB "c")
	endif()
	set(PROJECT_LOGO "${CMAKE_CURRENT_SOURCE_DIR}/logo.png")
	set(DOXYGEN_IN "${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in")
	set(DOXYGEN_OUT "${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile")
	set(DOXYGEN_OUTPUT_DIRECTORY "/docs")

	# Copy DOXYGEN_IN -> DOXYGEN_OUT but replace all strings in DOXYGEN_IN
	# surrounded with @ signs with the values of the variables they name
	# For example: @PROJECT_LOGO@ is replaced with the value of PROJECT_LOGO
	configure_file("${DOXYGEN_IN}" "${DOXYGEN_OUT}" @ONLY)

	# Create a make target to generate documentation
	add_custom_target("${DOC_MAKE_TARGET}"
		COMMAND "${DOXYGEN_EXECUTABLE}" "${DOXYGEN_OUT}"
		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
		COMMENT "Generating documentation via Doxygen"
		VERBATIM
	)

	# For make clean
	set_property(TARGET "${DOC_MAKE_TARGET}"
		APPEND PROPERTY ADDITIONAL_CLEAN_FILES
		"${DOXYGEN_OUTPUT_DIRECTORY}"
		"${DOXYGEN_OUT}"
	)

endif(BUILD_DOC)


#################################################
#                                               #
#                Static Analysis                #
#                                               #
#################################################


if(CPP_CHECK)
	set(CMAKE_C_CPPCHECK "cppcheck" "--error-exitcode=1" "--inline-suppr")
	set(CMAKE_CXX_CPPCHECK "cppcheck" "--error-exitcode=1" "--inline-suppr")
endif()
if(IWYU)
	if(APPLE)
		set(IWYU_PATH "include-what-you-use")
	else()
		set(IWYU_PATH "iwyu" "--cxx17ns")
	endif()
	set(CMAKE_C_INCLUDE_WHAT_YOU_USE "${IWYU_PATH}")
	set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE "${IWYU_PATH}")
endif()
if(LWYU)
	if(APPLE)
		message(WARNING "Link what you use is not supported by Apple's linker. Skipping.")
	else()
		set(CMAKE_LINK_WHAT_YOU_USE TRUE)
	endif()
endif()
if(CLANG_TIDY)
	if(APPLE)
		set(CMAKE_C_CLANG_TIDY "/usr/local/opt/llvm/bin/clang-tidy")
		set(CMAKE_CXX_CLANG_TIDY "/usr/local/opt/llvm/bin/clang-tidy")
	else()
		set(CMAKE_C_CLANG_TIDY "clang-tidy-11")
		set(CMAKE_CXX_CLANG_TIDY "clang-tidy-11")
	endif()
endif()


#################################################
#                                               #
#          Generate Library and Tests           #
#                                               #
#################################################


# Create a make target for the library
add_subdirectory("${CLARICPP_SRC}")

# Create a make target for test cases
if(ENABLE_TESTING)
	add_subdirectory(tests)
endif()
