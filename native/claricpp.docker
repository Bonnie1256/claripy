FROM claricpp:base
SHELL [ "/bin/bash", "-ecux" ]

# Required build args
ARG VERSION=""

# Optional build args
ARG FORMAT="False"
ARG CMAKE_BUILD_TYPE="Debug"
ARG MAKE_TARGETS=""
ARG TEST="False"
ARG VERBOSE="False"

# Build constants
ARG CLARIPY="/claripy/"
ARG NATIVE="${CLARIPY}/native/"
ARG SRC="${NATIVE}/src/"
ARG BUILD="/build/"


# Require Version argument
RUN if [[ -z "${VERSION}" ]]; then \
		echo "Error: VERSION is a required build argument!" \
		exit 1; \
	fi


# Copy in source files
COPY . "${NATIVE}"
RUN echo "${VERSION}" > "${CLARIPY}/VERSION"


# Optional clang-format
WORKDIR "${NATIVE}"
RUN if [[ "${FORMAT}" == True ]]; then \
		find . -regex '.*\.\(cpp\|hpp\)' -exec \
			clang-format-11 -style=file -i {} ';' ; \
	fi


# CMake
RUN mkdir "${BUILD}"
WORKDIR "${BUILD}"
RUN cmake -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" "${NATIVE}"


# Make
WORKDIR "${BUILD}"
RUN make -j "$(nproc)" ${MAKE_TARGETS}


# Test if make targets request it
WORKDIR "${BUILD}"
RUN if [[ "${TEST}" == True ]]; then \
		make -j "$(nproc)" all && \
		if [[ "${VERBOSE}" == True ]]; then \
			ctest --verbose -j "$(nproc)" . ; \
		else \
			ctest -j "$(nproc)" . ; \
		fi \
	fi
