#################################################
#                                               #
#      Include And Link External Libraries      #
#                                               #
#################################################


# Include additional header files
message(STATUS "Including boost headers for target: ${CLARICPP}")
target_include_directories("${CLARICPP}" SYSTEM PRIVATE ${Boost_INCLUDE_DIRS})

# Link additional libraries
# We do not want their functions exposed by our shared object so we designate them private
message(STATUS "Linking gmp to target: ${CLARICPP}")
target_link_libraries("${CLARICPP}" PRIVATE ${GMP_LIBRARIES})


#################################################
#                                               #
#                 Autogen Code                  #
#                                               #
#################################################


# Define where autogen files should be put
set(AUTOGEN_DIR "${CMAKE_CURRENT_SOURCE_DIR}/autogen")

# Check if the required files exist
set(AUTOGEN_HPP "${AUTOGEN_DIR}/autogen.hpp")
set(SOURCES_TXT "${AUTOGEN_DIR}/sources.txt")
if (EXISTS "${AUTOGEN_HPP}" AND EXISTS "${SOURCES_TXT}" AND EXISTS "${HEADERS_TXT}")
	set(GEN_AUTOGEN OFF)
else()
	set(GEN_AUTOGEN ON)
endif()

# If needed autogenerate files
if ( GEN_AUTOGEN OR REGEN_AUTOGEN )
	message("Autogenerating op class code files")
	# Older versions of cmake to not support COMMAND_ERROR_IS_FATAL
	# so instead we utilize RESULT_VARIABLE (singular)
	execute_process(COMMAND
		python3 ./autogen.py "${CMAKE_CURRENT_SOURCE_DIR}" "${AUTOGEN_DIR}"
		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
		RESULT_VARIABLE RET
	)
	# Check the exit code
	if(NOT RET EQUAL 0)
		message(FATAL_ERROR "Autogen.py failed")
	endif()
else()
	message(STATUS "Using existing autogen'd files")
endif()

# Load autogen'd source paths
file(READ "${SOURCES_TXT}" AUTOGEN_SOURCES)
STRING(REPLACE "\n" ";" AUTOGEN_SOURCES "${AUTOGEN_SOURCES}")
list(TRANSFORM AUTOGEN_SOURCES PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/")

# Add source files
message(STATUS "Adding autogenerated sources")
target_sources("${CLARICPP}" PRIVATE
	${AUTOGEN_HEADERS}
	${AUTOGEN_SOURCES}
	base.cpp
	# Sources defining abstract classes autogen'd classes subclass
	# All ops defined in the json must have a source file in this list
	literal.cpp
	symbol.cpp
	if.cpp
)

# For make clean
set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
	APPEND PROPERTY ADDITIONAL_CLEAN_FILES
	"${AUTOGEN_DIR}"
)
