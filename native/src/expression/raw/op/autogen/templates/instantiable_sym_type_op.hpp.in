// This file determines how a SymTypeOp class defined
// Variables matching @\s*[A-Z][A-Z0-9]*\s*@ will be replaced if the
// whitespace stripped version of the regex matches one of the following:
// @SUPER2@ will be the second super of SymTypeOp (namespace relative to raw required)
// @TYPE@ will be replaced with the type in SymTypeOp (no namespace allowed)
// @SYM@ will be replaced with the sym in SymTypeOp (no namespace allowed)
// @OP@ will be replaced with the op in SymTypeOp (no namespace allowed)
// @CTORARGS@ will be replaced with the arguments that must be passed to the constructor

namespace Expression {
    namespace Raw::AutoGen {
        /** Static verification of sym */
        static_assert(std::is_same_v<Symbolic, @SYM @> || std::is_same_v<Concrete, @SYM @>,
                      "@SYM@ is neither Symbolic or Concrete");
        /** Define the @SYM@ @TYPE@ @OP@ type */
        struct @SYM @ @TYPE @ @OP @ : virtual public @TYPE @ @OP @, virtual public @SUPER2 @{
            EXPRESSION_RAW_INSTANTIABLE_INIT(@SYM @ @TYPE @ @OP @) private :
                /** Disable public construction */
                @SYM @ @TYPE @ @OP @(@CTORARGS @);
    }; // namespace Raw::AutoGen
} // namespace Expression
EXPRESSION_RAW_DECLARE_SHARED(@SYM @ @TYPE @ @OP @, Raw::AutoGen)
}
